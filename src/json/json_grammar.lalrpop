use super::ast::Json;

grammar;

/// JsonRoot: Null, Arr, Map
pub JsonRoot: Json = {
    null => Json::Null,
    JsonArr => Json::Arr(<>),
    JsonMap => Json::Map(<>)
}

JsonValue: Json = {
    null => Json::Null,
    true => Json::Bool(true),
    false => Json::Bool(false),
    float64 => Json::F64(<>.parse().unwrap()),
    string => Json::Str(<>.to_string()),
    JsonArr => Json::Arr(<>),
    JsonMap => Json::Map(<>)
}

// FIXME
JsonArr: Vec<Json> = {
    "[" <mut v:(<JsonValue> ",")*> <e:JsonValue?> "]" => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// FIXME: bug, `{"a": 1,}` should parse error
JsonMap: std::collections::HashMap<String, Json> = {
    "{" <v:(<string> ":" <JsonValue> ",")*> "}" => {
        v.into_iter().map(|(k,v)| (k.to_string(), v)).collect()
    }
}

match {
    // keywords
    "null" => null,
    "true" => true,
    "false" => false,

    r"[-+]?([0-9]*[.])?[0-9]+([eE][-+]?\d+)?" => float64,    
} else {
    // match string would ambiguity to others must put it in a else branch
    r#"(?:[^"\\]|\\.)*"# => string,
    _,
}
